{"0": {
    "doc": "Components",
    "title": "Components",
    "content": "# Components {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Logical group Genie expects you to divide up your code into self-contained components. ",
    "url": "/components/",
    "relUrl": "/components/"
  },"1": {
    "doc": "Hooks & Filters",
    "title": "Hooks & Filters",
    "content": "# Hooks & Filters {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Main Usage You can use the `HookInto` utility to hook into actions and filters. Genie uses Reflection to work out how many parameters are being use in the closure or function ## Basic usage ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init') ->run(function() { // run something here }); ``` ## Setting Priority The default priority is 10. ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init', 20) ->run(function() { // run something here }); ``` ## Using a callback any callable is accepted by the `run()` method. ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init', 20) ->run( [\\Lnk7\\Genie\\Debug::class, 'dd']); ``` ## Multiple Hooks You can add multiple hooks or filters at the same time using `orAction()` or for filters `orFilter()` ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init', 20) ->orAction('wp_loaded') ->run( function() { // run something }); ``` ## Filters rather than use action - you can use the `filter()` method: ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::filter('the_content') ->run( function($content) { // run something return $content; }); ``` ",
    "url": "/Reference/hooks_and_filters/",
    "relUrl": "/Reference/hooks_and_filters/"
  },"2": {
    "doc": "Reference",
    "title": "Reference",
    "content": " ",
    "url": "/Reference/",
    "relUrl": "/Reference/"
  },"3": {
    "doc": "Genie Press",
    "title": "Genie Press",
    "content": "# Genie: The WordPress Programmer's Toolkit I got tired of copying and pasting this code from plugin to plugin to theme Here it is... enjoy :) Sunil ## Add Genie through composer `composer require \"lnk7\\genie\"` ## Update composer.json In this example we'll be using the namespace `GeniePluginExample`, so let's update `composer.json` with the right location for the php files. In this example We're storing php files in the `src/php` folder. ```json { \"name\": \"lnk7/test\", \"description\": \"Testimonial Plugin using GeniePress\", \"license\": \"GPL-2.0-or-later\", \"require\": { \"lnk7/genie\": \"^1\" }, \"minimum-stability\": \"stable\", \"autoload\": { \"psr-4\": { \"GeniePluginExample\\\\\": \"src/php\" } } } ``` ## Create your plugin file Now let's create our plugin file. We'll call it `testimonials.php` ```php withComponents([ Plugin::class, Testimonial::class, ]) ->start(); ``` `Genie` has two main methods called `createPlugin()` and `createTheme()`. If you are creating a theme, all the steps in the tutorial are the same except the above code would be in your `functions.php` file. The above code tells Genie to load the `Plugin` class. I like encapsulating code in components ## The `Plugin` component Each Component implements the `GenieComponent` Interface - It must have a `setup()` method. In this example, the Plugin class will be responsible for ensuring jQuery is loaded in the front-end. ```php run(function () { wp_enqueue_script('jQuery'); }); } } ``` Here we're using Genie's `HookInto` utility to hook into the `wp_enqueue_scripts` to ensure jQuery is loaded. `HookInto` uses reflection to work out the parameters required to be sent into the function (here there are none). The `setup()` method is the place to add all hooks, register schemas and APIs ## Custom Posts and ACF So let's have a look at the testimonial component Genie provides a handy utility to register CustomPosts. Your Class should extend `CustomPost` Here is a sample custom Post type called Testimonial ```php 'London', 'fr' => 'France', ]; // This is called by Genie public static function setup() { // We should call the parent setup(); parent::setup(); // Use a Genie to register the custom post. Most classes // in genie are fluent. I just find it reads better CreateCustomPostType::called(static::$postType) ->icon('dashicons-admin-comments') ->register(); // Create an ACF Schema ! CreateSchema::called('Testimonial') ->withFields([ // We have a whole bunch of fields we can use - Check teh // Fields folder TextField::called('name') ->required(true) ->wrapperWidth(50), SelectField::called('location') ->choices(static::$locations) ->default('london') ->returnFormat('value') ->required(true) ->wrapperWidth(50), ]) // Where should this be shown? ->shown(Where::field('post_type')->equals(static::$postType)) //Attach it to this class so we can do fancy stuff - see later ->attachTo(static::class) ->register(); // Use genie to register an ajax endpoint RegisterAjax::url('testimonial/create') ->run([static::class, 'addTestimonial']); // Register an api endpoint to return all the Testimonials RegisterApi::get('testimonials') ->run(function() { return static::get()->toArray(); }); // Let's setup the testimonial form AddShortcode::called('testimonial_form') ->run(function () { // nice , we're using twig ! All your return View::with('testimonials/form.twig') ->addVar('locations', static::$locations) ->render(); }); // Show one Testimonial AddShortcode::called('testimonial') ->run(function ($attributes) { $attributes = (object)shortcode_atts([ 'name' => $attributes[0], ], $attributes); $testimonial = static::get([ 'meta_key' => 'name', 'meta_value' => $attributes->name, ])->first(); return View::with('testimonials/testimonial.twig') ->addVar('testimonial', $testimonial) ->addVar('locations', static::$locations) ->render(); }); // Show all testimonials AddShortcode::called('testimonials') ->run(function ($attributes) { $testimonials = static::get(); return View::with('testimonials/testimonials.twig') ->addVar('testimonials', $testimonials) ->addVar('locations', static::$locations) ->render(); }); } /** * Add a testimonial - called from Ajax * * @param $title * @param $text * @param $name * @param $location * * @return array */ public static function addTestimonial($title, $text, $name, $location) { // There's not much we need to do here, Genie has already made sure // that each of the parameters being sent by the ajax call have been // set. // let's create the testimonial. $testimonial = static::create([ 'post_title' => $title, 'post_content' => $text, 'name' => $name, 'location' => $location, 'post_status' => 'draft', ]); // Genie will convert this back to json for us return [ 'message' => 'Testimonial pending approval', 'id' => $testimonial->ID, ]; } } ``` ## Let's have a look at the twig files By default Genie looks in the 'src/twig' folder for your twig files ### Form.twig ```html {% raw %} Title . Testimonial . Name . Location {% for code,text in locations %} {{ text }} {% endfor %} . Save . {% endraw %} ``` ## testimonial.twig ```html {% raw %} {{ testimonial.post_content|wpautop }} . â€”{{ testimonial.name }}, {{ locations[testimonial.location] }} {% endraw %} ``` ## testimonials.twig We love twig - code reuse :) ```html {% raw %} {% for testimonial in testimonials %} {% include 'testimonials/testimonial.twig' %} {% endfor %} {% endraw %} ``` ",
    "url": "/",
    "relUrl": "/"
  },"4": {
    "doc": "Installation",
    "title": "Installation",
    "content": "# Components {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Via Composer `composer require \"lnk7\\genie\"` ",
    "url": "/installation/",
    "relUrl": "/installation/"
  },"5": {
    "doc": "Shortcodes",
    "title": "Shortcodes",
    "content": "# Shortcodes {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Main Usage You can use the `HookInto` utility to hook into actions and filters. Genie uses Reflection to work out how many parameters are being use in the closure or function ## Basic usage ```php use Lnk7\\Genie\\Utilities\\AddShortcode; AddShortcode::called('test_me') ->run(function($attributes,$content) { // process your shortcode here }); ``` ## Using Views with Shortcodes ```php use Lnk7\\Genie\\Utilities\\AddShortcode; AddShortcode::called('user') ->run(function($attributes,$content) { return \\Lnk7\\Genie\\View::with('shortcodes/user.twig') ->addVars([ 'user' => wp_get_current_user(), 'attributes' => $attributes, ]) ->render(); }); ``` The shortcode could be user : ```html Hello [user field=name ], ``` And the `shortcodes/user.twig` file ```twig {% raw %} {% if attributes.field == 'name' and user.first_name %} {{user.first_name}} {% else %} there {% endif %} {% endraw %} ``` Learn more about using Views ",
    "url": "/Reference/shortcodes/",
    "relUrl": "/Reference/shortcodes/"
  },"6": {
    "doc": "Views",
    "title": "Views",
    "content": "# Genie Views {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Genie uses Twig Genie uses twig behind the scenes to ensure separation of concerns. By default, Genie looks for veiws in the `src/views` folder. ## Example Component using a View ```php run(function() { View::with('footer.twig') ->display(); }); } } ``` Genie will look into the `src/twig` folder for `footer.twig` `footer.twig` ```html This is a twig file! . ``` ## Passing Variables to templates ### Individual variables ```php use Lnk7\\Genie\\View; View::with('footer.twig') ->addVar('user', get_current_user()) ->display(); ``` ### As an array ```php use Lnk7\\Genie\\View; View::with('footer.twig') ->addVars([ 'time' => time(), 'user' => get_current_user() ]) ->display(); ``` ## Returning html use `render()` to return html ```php use Lnk7\\Genie\\View; $html = View::with('footer.twig') ->addVars([ 'name' => 'sunil', 'user' => get_current_user() ]) ->render(); ``` ## Changing the default path for views When creating a genie plugin or theme you can specify the location of twig files using the `useViewsFrom()` method. ```php use Lnk7\\Genie\\Genie; Genie::createPlugin() ->withComponents([ //component classes ]) ->useViewsFrom( 'my_dir/my_folder') ->start(); ``` ",
    "url": "/Reference/views/",
    "relUrl": "/Reference/views/"
  }
}
