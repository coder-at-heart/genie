{"0": {
    "doc": "Components",
    "title": "Components",
    "content": "# Components {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Logical grouping Genie expects you to divide up your code into self-contained classes called components. Each class should implement the `GenieComponent` interface Each component should implement a public static method called `setup` where Custom Posts are registered, hooks and filters defined etc ",
    "url": "/components/",
    "relUrl": "/components/"
  },"1": {
    "doc": "Hooks & Filters",
    "title": "Hooks & Filters",
    "content": "# Hooks & Filters {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Main Usage You can use the `HookInto` utility to hook into actions and filters. Genie uses Reflection to work out how many parameters are being use in the closure or function ## Basic usage ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init') ->run(function() { // run something here }); ``` ## Setting Priority The default priority is 10. ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init', 20) ->run(function() { // run something here }); ``` ## Using a callback any callable is accepted by the `run()` method. ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init', 20) ->run( [\\Lnk7\\Genie\\Debug::class, 'dd']); ``` ## Multiple Hooks You can add multiple hooks or filters at the same time using `orAction()` or for filters `orFilter()` ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::action('init', 20) ->orAction('wp_loaded') ->run( function() { // run something }); ``` ## Filters rather than use action - you can use the `filter()` method: ```php use Lnk7\\Genie\\Utilities\\HookInto; HookInto::filter('the_content') ->run( function($content) { // run something return $content; }); ``` ",
    "url": "/Reference/hooks_and_filters/",
    "relUrl": "/Reference/hooks_and_filters/"
  },"2": {
    "doc": "Reference",
    "title": "Reference",
    "content": " ",
    "url": "/Reference/",
    "relUrl": "/Reference/"
  },"3": {
    "doc": "Genie Press",
    "title": "Genie Press",
    "content": "# GeniePress: The Framework for WordPress Developers GeniePress is a plugin and theme framework with expressive elegant syntax. Should we say - It's poetry reinvented? It makes plugin and theme development fun, while never having to mix html and php again. It's fluent and very laravelesque. The sample theme combines GeniePress with Vue and Tailwind, providing you with a foundation for creating powerful theme. ",
    "url": "/",
    "relUrl": "/"
  },"4": {
    "doc": "Installation",
    "title": "Installation",
    "content": "# Installation {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Sample Plugin `composer create-project lnk7/genie-plugin` The sample plugin contains a sample Testimonial plugin. ## Sample Theme `composer create-project lnk7/genie-theme` Once installed: `npm install` `npm watch` Activate the theme ",
    "url": "/installation/",
    "relUrl": "/installation/"
  },"5": {
    "doc": "Shortcodes",
    "title": "Shortcodes",
    "content": "# Shortcodes {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Main Usage You can use the `HookInto` utility to hook into actions and filters. Genie uses Reflection to work out how many parameters are being use in the closure or function ## Basic usage ```php use Lnk7\\Genie\\Utilities\\AddShortcode; AddShortcode::called('test_me') ->run(function($attributes,$content) { // process your shortcode here }); ``` ## Using Views with Shortcodes ```php use Lnk7\\Genie\\Utilities\\AddShortcode; AddShortcode::called('user') ->run(function($attributes,$content) { return \\Lnk7\\Genie\\View::with('shortcodes/user.twig') ->addVars([ 'user' => wp_get_current_user(), 'attributes' => $attributes, ]) ->render(); }); ``` The shortcode could be user : ```html Hello [user field=name ], ``` And the `shortcodes/user.twig` file ```twig {% raw %} {% if attributes.field == 'name' and user.first_name %} {{user.first_name}} {% else %} there {% endif %} {% endraw %} ``` Learn more about using Views ",
    "url": "/Reference/shortcodes/",
    "relUrl": "/Reference/shortcodes/"
  },"6": {
    "doc": "Views",
    "title": "Views",
    "content": "# Genie Views {: .no_toc } {: .text-delta } 1. TOC {:toc} ## Genie uses Twig Genie uses twig behind the scenes to ensure separation of concerns. By default, Genie looks for veiws in the `src/views` folder. ## Example Component using a View ```php run(function() { View::with('footer.twig') ->display(); }); } } ``` Genie will look into the `src/twig` folder for `footer.twig` `footer.twig` ```html This is a twig file! . ``` ## Passing Variables to templates ### Individual variables ```php use Lnk7\\Genie\\View; View::with('footer.twig') ->addVar('user', get_current_user()) ->display(); ``` ### As an array ```php use Lnk7\\Genie\\View; View::with('footer.twig') ->addVars([ 'time' => time(), 'user' => get_current_user() ]) ->display(); ``` ## Returning html use `render()` to return html ```php use Lnk7\\Genie\\View; $html = View::with('footer.twig') ->addVars([ 'name' => 'sunil', 'user' => get_current_user() ]) ->render(); ``` ## Changing the default path for views When creating a genie plugin or theme you can specify the location of twig files using the `useViewsFrom()` method. ```php use Lnk7\\Genie\\Genie; Genie::createPlugin() ->withComponents([ //component classes ]) ->useViewsFrom( 'my_dir/my_folder') ->start(); ``` ",
    "url": "/Reference/views/",
    "relUrl": "/Reference/views/"
  }
}
